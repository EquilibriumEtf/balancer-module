{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "Used by Abstract to instantiate the contract The contract is then registered on the version control contract using [`crate::version_control::ExecuteMsg::AddApi`].",
  "type": "object",
  "required": [
    "base",
    "custom"
  ],
  "properties": {
    "base": {
      "description": "base instantiate information",
      "allOf": [
        {
          "$ref": "#/definitions/BaseInstantiateMsg"
        }
      ]
    },
    "custom": {
      "description": "custom instantiate msg attributes",
      "allOf": [
        {
          "$ref": "#/definitions/BalancerModuleInstantiateMsg"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "BaseInstantiateMsg": {
      "description": "Used by Module Factory to instantiate App",
      "type": "object",
      "required": [
        "memory_address"
      ],
      "properties": {
        "memory_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "BalancerModuleInstantiateMsg": {
      "description": "Init msg",
      "type": "object",
      "required": [
        "max_count"
      ],
      "properties": {
        "initial_counts": {
          "description": "Initial user counts",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "max_count": {
          "description": "The initial value for max_count",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
